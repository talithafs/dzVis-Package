grepl(".html?$", "da.htm")
grepl(".html?$", "da.htg")
grepl("\\.html?$", "dahtml")
grepl("\\.html?$", "da.html")
grepl("\\.html?$", "da.htm")
?grep
gsub("\\.html?$", ".html", "dat")
gsub("\\.htm$", ".html", "dat.htm")
gsub("\\.htm$", ".html", "dathtm")
gsub("\\.htm$", ".html", "dat.html")
?gvisMotionChart
library(RMySQL)
library(zoo)
library(googleVis)
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
dbGetQuery(connection, "show databases;")
dbGetQuery(connection, "describe pea_por_idade ;")
dbListTables(connection)
Sys.setlocale("LC_TIME","Portuguese_Brazil.1252")
dados <- dbReadTable(connection,"pea_por_idade")
dados$mes <- as.Date(as.yearmon(dados$mes))
dados <- dados[dados$tipo_area == "Total das Ã¡reas",]
labor = gvisMotionChart(dados, idvar='grupo_idade', timevar='mes', yvar="total_por_mil")
plot(labor)
labor = gvisMotionChart(dados, idvar='n_area', timevar='ano', xvar="educ_ate_5a_serie", yvar="salario_real_medio", sizevar="vinculos", date.format = "%Y")
labor = gvisMotionChart(dados, idvar='grupo_idade', timevar='mes', yvar="total_por_mil", date.format = "%Y")
plot(labor)
labor = gvisMotionChart(dados, idvar='grupo_idade', timevar='mes', yvar="total_por_mil", date.format = "%Y")
plot(labor)
roxygen2::roxygenise()
validateLimits("pea_por_sexo", "mes", "2010-01-01", "2010-02-01")
validateLimits("pea_por_sexo", "mes", "2010-01-01", "2010-02-01")
library(dzVis)
validateLimits("pea_por_sexo", "mes", as.Date("2010-01-01"), as.Date("2010-02-01"))
validateLimits("pea_por_sexo", "mes", as.Date("2009-01-01"), as.Date("2010-02-01"))
validateLimits("pea_por_sexo", "mes", as.Date("2009-01-01"), as.Date("2008-02-01"))
roxygen2::roxygenise()
library(dzVis)
library(dzVis)
mapChartVariables("pea_por_sexo", "sexo")
library(dzVis)
mapChartVariables("pea_por_sexo", "sexo")
library(dzVis)
mapChartVariables("pea_por_sexo", "sexo")
mapChartVariables("pea_por_sexo", c("sexo", "tipo_area", "mes", "pecentual_total"))
mapChartVariables("pea_por_sexo", c("sexo", "tipo_area", "mes", "percentual_total"))
?mapChartVariables
?validateConsistency
?validateKeys
validateKeys("pea_por_idade", c("grupo_idade"))
?validateConsistency
?importData
?validateKeys
?validateLimits
roxygen2::roxygenise()
library(dzVis)
restrictions
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", "2009-01-01", "2009-04-01", restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
restrictions
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
library(dzVis)
library(dzVis)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
library(dzVis)
library(dzVis)
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", as.Date("2009-01-01"), as.Date("2009-04-01"), restrictions)
data
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
data
class(restrictions)
library(dzVis)
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
?imporData
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
library(dzVis)
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
data
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = as.Date("2009-01-01"), max = as.Date("2009-04-01"), restrictions = restrictions)
library(dzVis)
data
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = "2009-01-01", max = "2009-04-01", restrictions = restrictions)
data
library(dzVis)
data <- createComboChart("teste", "pea_por_sexo", "percentual_ativas", "sexo", "mes", min = "2009-01-01", max = "2009-04-01", restrictions = restrictions)
data
library(dzVis)
?createComboChart
roxygen2::roxygenise()
library(dzVis)
?mapChartVariables
?createComboChart
rebuild <- function(run = TRUE, install = TRUE){
wamp <- "C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\"
dzvis <- "C:\\Users\\Talitha\\Documents\\R\\win-library\\3.2\\dzVis\\"
www <- paste(dzvis, "\\www", sep="")
if(file.exists(www)) {
unlink(www, recursive = TRUE)
}
require(devtools)
devtools::build()
if(install){
devtools::install()
}
file.copy(wamp,dzvis,recursive=TRUE)
if(run){
run()
}
}
rebulid()
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild()
conn <- connection()
conn <- connect()
library(dzVis)
conn <- cconnect())
conn <- cconnect()
conn <- connect()
getColumnValues("pea_por_idade.grupo_idade", "pea_por_idade", 50)
?getColumnValues()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
?mapChartVariables
?mapChart
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
library(dzVis)
mapChartVariables("pea_idade", "mes", NULL)
mapChartVariables("pea_por_idade", "mes", NULL)
rebuild(run = F)
mapChartVariables("pea_por_idade", "mes", NULL)
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
rebuild()
rebuild()
updateFrontEnd()
rebuild()
rebuild()
updateFrontEnd()
mapChartVariables("pea_por_sexo", "sexo")
mapChartVariables("pea_por_sexo", "sexo")
updateFrontEnd()
mapChartVariables("pea_por_sexo", "sexo", NULL)
mapChartVariables("pea_por_sexo", "pea_por_sexo.coeficiente_ativas", NULL)
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
dbDesc[[dbName]]$id <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
dbDesc[[dbName]]["id"] <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
?cbind
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
col <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
dbDesc[[dbName]] = cbind(col, dbDesc[[dbName]])
names(dbDesc[[dbName]])[1] <- "id"
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
?dzVis
library(dzVis)
?validateTimeVariable
getwd()
setwd("C://Users//Talitha//Dropbox//Economia//Projeto Final//R Package//dzVis")
getwd()
rebuild(run =F)
library(dzVis)
?validateTimeVariable
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild()
(.packages())
rm(list = ls())
(.packages())
ls
ls()
(.packages())
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
library(dzVis)
validateKeys("pea_por_idade", "")
rebuild(run = F)
library(dzVis)
rebuild(run = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild(run = F)
getColumnByCategories("pea_por_sexo",.TARGET)
getColumnByCategory("pea_por_sexo",.TARGET)
getColumnsByCategory("pea_por_sexo",.TARGET)
library(dzVis)
getColumnsByCategory("pea_por_sexo",.TARGET)
?dzVis
library(dzVis)
?dzVis
?importData
?dzVis
?dzvis
??dzvis
rebuild(run = F)
library(dzVis)
getColumnsByCategory("pea_por_sexo",.TARGET)
getColumnsByCategory("pea_por_sexo","TARGET")
rebuild(run = F)
getColumnsByCategory("pea_por_sexo","TARGET")
.TARGET
?getCOlumnsByCategory
?getColumnsByCategory
?getColumnsByCategory
library(roxygen2)
