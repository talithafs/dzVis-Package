updateFrontEnd()
labor = gvisMotionChart(dados, idvar='grupo_idade', timevar='mes', yvar="total_por_mil", date.format = "%d-%m-%Y")
dados <- dbReadTable(connection,"pea_por_idade")
dados$mes <- as.Date(as.yearmon(dados$mes))
dados <- dados[dados$tipo_area == "Total das Ã¡reas",]
labor = gvisMotionChart(dados, idvar='grupo_idade', timevar='mes', yvar="total_por_mil", date.format = "%d-%m-%Y")
plot(labor)
M2 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Date",
date.format = "\%Y\%m\%d")
plot(M2)
M2 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Date",
date.format = "\%Y\%m\%d")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%YW\%W")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%YW\%W")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%YW %W")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\\%YW\\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%YW-%W")
plot(M3)
Sys.setlocale("LC_TIME","English_United States.1252")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%YW%W")
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="\%YW\%W")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%m%Y")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%m %Y")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%Ym%Y")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%M")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="MM")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%d%m%Y")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="dMY")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%d/%m/%Y")
plot(M3)
class(date$mes)
class(date$mes[1])
date$mes
class(data$mes)
date.format(data$mes)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", date.format="%d%m%Y")
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(duration={"timeUnit":"M"}))
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(duration={"multiplier":1,"timeUnit":"M"}))
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(duration="{"multiplier":1,"timeUnit":"M"}"))
opt <- "{"multiplier":1,"timeUnit":"M"}"
opt <- "\{\"multiplier\":1,\"timeUnit\":\"M\"\}"
opt <- "{multiplier : 1, timeUnit : 'M'}"
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(duration= opt))
plot(M3)
opt <- "{"multiplier":1,"timeUnit":"Y"}"
opt <- "{multiplier : 1, timeUnit : 'Y'}"
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(duration= opt))
plot(M3)
'\n"duration":{"multiplier":1,"timeUnit":"Y"}\n'
st <- '\n"duration":{"multiplier":1,"timeUnit":"Y"}\n'
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(state= st))
plot(M3)
st <- '\n{"multiplier":1,"timeUnit":"Y"}\n'
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(state= st))
plot(M3)
st <- '\n{"duration":{"multiplier":1,"timeUnit":"Y"}}\n'
plot(M3)
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(state= st))
plot(M3)
st <- '\n{"timeUnit":"Y"}\n'
M3 <- gvisMotionChart(Fruits, "Fruit", "Date", options=list(state= st))
plot(M3)
myStateSettings <-'\n{"iconType":"LINE"}\n'
M6b <- gvisMotionChart(Fruits, "Fruit", "Year",
options=list(state=myStateSettings))
plot(M6b)
alternatives
alternatives[alternatives[1,] == "mes",2]
alternatives[alternatives[1,] == "mes",2]
alternatives[alternatives[1,] == "mes",]
alternatives[alternatives[1,] == "mes ",]
alternatives[alternatives[1,] == "mes",]
alternatives
alternatives[,"mes"]
alternatives[,2]
alternatives[alternatives[,1]== "mes",2]
getColumnsByCategory("pea_por_idade", "TIME")
dbGetQuery("select descricao, frequencia_dados from tabelas where nome = "pea_por_idade"")
dbGetQuery("select descricao, frequencia_dados from tabelas where nome = "pea_por_idade", connect())
dbGetQuery(connect(),"select descricao, frequencia_dados from tabelas where nome = "pea_por_idade"")
dbGetQuery(connect(),"select descricao, frequencia_dados from tabelas where nome = 'pea_por_idade'")
results[[1]]
res <- dbGetQuery(connect(),"select descricao, frequencia_dados from tabelas where nome = 'pea_por_idade'")
res
res[[1]]
res[[2]]
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
col <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
dbDesc[[dbName]] = cbind(col, dbDesc[[dbName]])
names(dbDesc[[dbName]])[1] <- "id"
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao, frequencia_dados from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], ', \"frequency\": "', results[[2]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
col <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
dbDesc[[dbName]] = cbind(col, dbDesc[[dbName]])
names(dbDesc[[dbName]])[1] <- "id"
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao, frequencia_dados from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '\", \"frequency\": "', results[[2]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
updateFrontEnd()
alt <- restrictions
alt
alternatives
alt <- alternatives
alt
alt[c(1,2,3),2]
alt[c(1,2,3),2] <- c(10,11,12)
alt
alt[c(10,11,12),2]
as.Date("2008-02")
chart <- createComboChart("chart","pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes",NA,NA, NULL, "Media", restrictions, alternatives)
chart <- createComboChart("pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes",NA,NA, NULL, "Media", restrictions, alternatives)
a <- 1
length(a)
for(i in 1:1){ a[i] <- a[i] + 1}
a
as.yearmon("2005-01")
as.Date(2005)
ym <- as.yearmon("2005-01")
format(ym, "%m")
format(ym, "%y")
format(ym, "%yy")
format(ym, "%y")
format(ym, "%Y")
as.yearmon("2005-01-01")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
dates <- c("2005-01","2001-02")
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
as.Date("2005-01-01")
paste(2005,"-",01,"-01",sep="")
paste(2005,"-",as.character(01),"-01",sep="")
as.character(01)
as.character('01')
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",dates)
formatDates("pea_por_idade", c("2005-01-01","2001-02-01"))
formatDates("pea_por_idade", c("2005-01","2001-02"))
formatDates("pea_por_idade", c("2005-01-01","2001-02-01"), toStandard = FALSE)
formatDates("pea_por_idade", "2012-01-01")
formatDates("pea_por_idade", "2012-01")
alternatives
alt = alternatives
alt[,2] <- c("2002-03", "2004-02","2006-02", "2007-03", "2009-07")
alt
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alternatives)
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
alt
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/importData.R')
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/importData.R')
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/importData.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
Sys.getlocale(category = "LC_TIME")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
importData("pea_por_idade",c("tipo_area"),restrictions,alternatives = alt)
library(dzVis)
chart <- createComboChart("pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes",NA,NA, NULL, "Media", restrictions, alt)
as.yearmon(NA)
library(dzVis)
chart <- createComboChart("pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes",NA,NA, NULL, "Media", restrictions, alt)
chart
chart <- createComboChart("pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes",NA,NA, NULL, "Media", restrictions, alt)
chart
getwd()
chart <- createComboChart("pea_por_idade",c("percentual_ativas","percentual_nao_ativas"), NULL,"mes","2005-01","2005-06", NULL, "Media", restrictions, NULL)
rebuild(doc=T)
rebuild()
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild()
library(roxygen2)
rebuild()
setwd(C:\\Users\\Talitha\\Documents\\R\\win-library\\3.2\\dzVis\\)
setwd('C:\\Users\\Talitha\\Documents\\R\\win-library\\3.2\\dzVis\\')
rebuild()
library(dzVis)
rebuild()
rebuild()
rebuild()
roxygenise()
getwd
getwd()
roxygenise()
warnings()
roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
updateFrontEnd()
rebuild()
updateFrontEnd()
getwd()
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
updateFrontEnd()
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",c("01-02-2003","02-02-2009"), toStandard = F)
library(dzVis)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",c("01-02-2003","02-02-2009"), toStandard = F)
libarary(RMySQL)
library(RMySQL)
library(zoo)
formatDates("pea_por_idade",c("01-02-2003","02-02-2009"), toStandard = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/formatDates.R')
formatDates("pea_por_idade",c("01-02-2003","02-02-2009"), toStandard = F)
formatDates("pea_por_idade",c("2003-01-01","2009-02-10"), toStandard = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/mapChartVariables.R')
mapChartVariables("pea_por_idade",c("mes", "tipo_area"))
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/constants.R')
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/mapChartVariables.R')
mapChartVariables("pea_por_idade",c("mes", "tipo_area"))
mapChartVariables("pea_por_sexo",c("mes", "tipo_area"))
rebuild()
importData()
run()
dbListConnections(MySQL())
for(con in  dbListConnections(MySQL())){}
for(con in  dbListConnections(MySQL())){ dbDisconnect(con)}
dbListConnections(MySQL())
run()
dbListConnections(MySQL)
dbListConnections(MySQL())
run()
dbListConnections(MySQL())
rebuild9
rebuild()
connect()
conn <- connect()
conn
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
updateFrontEnd()
updateFrontEnd()
rebuild()
updateFrontEnd()
dbListConnections()
dbListConnections(MySQL())
for(con in  dbListConnections(MySQL())){ dbDisconnect(con)}
rebuild()
?opencpu
uninstall(opencpu)
uninstall("opencpu")
install.packages("opencpu")
install.packages("opencpu")
run()
rebuild()
library(dzVis)
mapChartVariables("pea_por_idade","*")
library(dzVis)
mapChartVariables("pea_por_idade","*")
library(dzVis)
mapChartVariables("pea_por_idade","*")
update_packages("opencpu")
.WAMP_DIR = "C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\"
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild()
install.packages("Rcpp")
rebuild()
install.packages("digest")
install.packages("digest")
rebuild9
rebuild()
install.packages("jsonlite")
rebuild()
install.packages("jsonlite")
rebuild()
install.packages("openssl")
rebuild()
run()
uninstall("opencpu")
install.packages("opencpu")
install.packages("opencpu")
rebuild()
library(opencpu)
opencpu$browse("/library/dzVis/www")
library(opencpu)
opencpu$browse("/library/dzVis/www")
unistall(opencpu)
uninstall("opencpu")
run()
install.packages("opencpu")
install.packages("opencpu")
run()
remove.packages("opencpu")
update.packages("opencpu")
run()
install.packages("opencpu")
install.packages("opencpu")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
run()
library(opencpu)
library(opencpu)
library(opencpu)
run()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("httpuv")
run()
install.packages("httpuv", type="source")
install.packages("httpuv", type = "source")
run()
install.packages("Rcpp", type = "source")
install.packages("Rcpp", type = "source")
run()
run()
run()
library(opencpu)
