type = types[types$cod == "tipo_area",2]
type
connect <- function(){
dbConnect(MySQL(), db = "dzVis",  user = "dzvisuser", host = "Talita-PC", port=3306)
}
types <- getDataTypes("pea_por_sexo", c("tipo_area", "percentual_total"), conn)
types
getDataTypes <- function(table, columns, connection = NULL){
conn <- connection
if(is.null(connection)) {
conn <- connect()
}
descTable <- paste("desc_", table, sep="")
vars <- paste("'", columns, "'", collapse = ", ", sep = "")
query <- paste("select cod, ctype from", descTable, "where cod in (", vars, ")")
types <- dbGetQuery(conn, query)
if(is.null(connection)) {
disconnect(conn)
}
return(types)
}
types <- getDataTypes("pea_por_sexo", c("tipo_area", "percentual_total"), conn)
types
connect <- function(){
dbConnect(MySQL(), db = "dzVis",  user = "dzvisuser", host = "Talita-PC", port=3306)
}
types <- getDataTypes("pea_por_sexo", c("tipo_area", "percentual_total"), conn)
types <- getDataTypes("pea_por_sexo", c("tipo_area", "percentual_total"))
connect <- function(){
dbConnect(MySQL(), db = "dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
}
importData <- function(table, columns, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
cols <- paste(columns,collapse = ", ")
query <- paste("select",cols,"from",table)
data <- dbGetQuery(conn, query)
types <- getDataTypes(table, columns, conn)
for(colName in names(data)){
type = types[types$cod == colName,2]
if(type == "enum"){
data[,colName] <- as.factor(data[,colName])
}
else if(type == "int"){
data[,colName] <- as.integer(data[,colName])
}
else if(type == "double"){
data[,colName] <- as.numeric(data[,colName])
}
else if(type == "date" || type == "datetime"){
data[,colName] <- as.Date(data[,colName])
}
else if(type == "varchar"){
data[,colName] <- as.character(data[,colName])
}
}
if(is.null(connection)) {
disconnect(conn)
}
return(data)
}
disconnect(conn)
conn <- connect()
library(RMySQL)
conn <- connect()
data <- importData("pea_por_sexo", c("tipo_area", "sexo", "mes", "percentual_total"),conn)
head(data)
class(tipo_area)
class(data$tipo_area)
class(data$sexo)
class(data$mes)
class(data$percentual_total)
validateGroupVariables <- function(data, groupVar){
if(class(data) == "character"){
types <- getDataTypes(data,groupVar)
for(type in types[,"ctype"]){
if(type != "enum"){
return(FALSE)
}
}
return(TRUE)
}
else if(class(data) == "data.frame"){
}
stop("Error: Parameter 'data' is not valid.");
}
validateGroupVariables(223,' ')
var <- as.integer(5)
is.numeric(var)
vec <- c("a", "b", "c")
"d" %in% vec
"a" %in% vec
importData <- function(table, columns, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
cols <- paste(columns,collapse = ", ")
query <- paste("select",cols,"from",table)
data <- dbGetQuery(conn, query)
types <- getDataTypes(table, columns, conn)
for(colName in names(data)){
type = types[types$cod == colName,2]
if(type == "enum"){
data[,colName] <- as.factor(data[,colName])
}
else if(type == "int"){
data[,colName] <- as.integer(data[,colName])
}
else if(type == "double"){
data[,colName] <- as.numeric(data[,colName])
}
else if(type == "date" || type == "datetime"){
data[,colName] <- as.Date(data[,colName])
}
else if(type == "varchar"){
data[,colName] <- as.character(data[,colName])
}
}
if(is.null(connection)) {
disconnect(conn)
}
return(data)
}
data <- importData("pea_por_sexo", "tipo_area")
data
data <- importData("pea_por_sexo", c("tipo_area", "mes", "sexo", "percentual_total"))
head(data)
validateGroupVariables(data, "tipo_area")
is.data.frame(data)
validateGroupVariables <- function(data, groupVar){
if(is.character(data)){
types <- getDataTypes(data,groupVar)
if(length(groupVar) == 1){
type <- types[1,"ctype"]
if(type == "enum" || type == "double" || type == "int"){
return(TRUE)
}
else{
return(FALSE)
}
}
for(type in types[,"ctype"]){
if(type != "int" && type != "double"){
return(FALSE)
}
}
return(TRUE)
}
else if(is.data.frame(data)){
if(length(groupVar) == 1){
if(is.factor(data[,groupVar]) || is.numeric(data[,groupVar])){
return(TRUE)
}
else{
return(FALSE)
}
}
for (colName in names(data)){
if(colName %in% groupVar){
if(!is.numeric(data[,colName])){
return(FALSE)
}
}
}
return(TRUE)
}
stop("Parameter 'data' is not valid.");
}
is.data.frame(data)
validateGroupVariables(data, "tipo_area")
validateGroupVariables(data, c("tipo_area","sexo"))
data <- importData("pea_por_sexo", c("tipo_area", "mes", "sexo", "percentual_total", "percentual_ativas"))
head(data)
validateGroupVariables(data, c("percentual_total", "percentual_ativas"))
validateKeys <- function(table, keys, restrictions = NULL, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
query = paste("describe", table)
info <- dbGetQuery(conn, query)
if(is.null(connection)) {
disconnect(conn)
}
return(info)
}
validateKeys("pea_por_sexo", "")
validateKeys <- function(table, keys, restrictions = NULL, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
query = paste("describe", table)
info <- dbGetQuery(conn, query)
actualKeys <- info[info$Key == "PRI",info$Field]
if(is.null(connection)) {
disconnect(conn)
}
return(actualKeys)
}
validateKeys("pea_por_sexo", "")
validateKeys <- function(table, keys, restrictions = NULL, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
query = paste("describe", table)
info <- dbGetQuery(conn, query)
#actualKeys <- info[info$Key == "PRI",info$Field]
if(is.null(connection)) {
disconnect(conn)
}
return(info)
}
info <- validateKeys("pea_por_sexo", "")
info
info$Field
nfo[info$Key == "PRI",info$Field]
info[info$Key == "PRI",info$Field]
info$Key
info[info$Key == "PRI",]
info[info$Key == "PRI","Field"]
vec <- info[info$Key == "PRI","Field"]
vec2 <- c("sexo", "mes", "tipo_area")
identical(vec, vec2)
validateKeys("pea_por_sexo", c("mes","tipo_area"))
validateKeys <- function(table, keys, connection = NULL){
conn <- connection
restrictions <- NULL
if(is.null(connection)){
conn <- connect()
}
query = paste("describe", table)
info <- dbGetQuery(conn, query)
actualKeys <- info[info$Key == "PRI","Field"]
for(key in actualKeys){
if(!(key %in% keys)){
restrictions <- c(restrictions, key)
}
}
if(is.null(connection)) {
disconnect(conn)
}
if(is.null(restrictions)){
return(TRUE)
}
return(restrictions)
}
validateKeys("pea_por_sexo", c("mes","tipo_area"))
validateKeys("pea_por_sexo", c("mes","tipo_area","sexo"))
validateKeys("pea_por_sexo", c("tipo_area","sexo"))
?"grep"
grep("^varchar", "varchar(200)")
grep("^varchar", "varcha(200)")
grepl("^varchar", "varcha(200)")
grepl("^varchar", "varchar(200)")
min <- as.Date('2010-01-01')
max <- as.Date('2011-01-01')
validateLimits <- function(data, columnName, min, max){
if(is.character(data)){
if(class(min) != class(max)){
return(FALSE)
}
else if(!is.character(min) && !is.numeric(min) && !is.Date(min)){
return(FALSE)
}
else if(min >= max){
return(FALSE)
}
connection <- connect()
query <- paste("select ctype from desc_", data, " where cod = ",columnName, sep="")
type <- dbGetQuery(connection, query)
if(is.character(min)){
return(grepl("^varchar", type))
}
else if(is.Date(min)){
return(type == "date" || type == "datetime")
}
else if(is.numeric(min)){
return(type == "int" || type == "double")
}
}
else if(is.data.frame(data)){
}
stop("Parameter 'data' is not valid. It should be a data.frame or a character.");
}
validateLimits("pea_por_sexo", "mes", min, max)
class(min)
validateLimits <- function(data, columnName, min, max){
if(is.character(data)){
if(class(min) != class(max)){
return(FALSE)
}
else if(!is.character(min) && !is.numeric(min) && !is.Date(min)){
return(FALSE)
}
else if(min >= max){
return(FALSE)
}
connection <- connect()
query <- paste("select ctype from desc_", data, " where cod = ",columnName, sep="")
type <- dbGetQuery(connection, query)
if(is.character(min)){
return(grepl("^varchar", type))
}
else if(class(min) == "Date"){
return(type == "date" || type == "datetime")
}
else if(is.numeric(min)){
return(type == "int" || type == "double")
}
}
else if(is.data.frame(data)){
}
stop("Parameter 'data' is not valid. It should be a data.frame or a character.");
}
validateLimits("pea_por_sexo", "mes", min, max)
}
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/validateLimits.R')
validateLimits("pea_por_sexo", "mes", min, max)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/validateLimits.R')
validateLimits("pea_por_sexo", "mes", min, max)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/validateLimits.R')
validateLimits("pea_por_sexo", "mes", min, max)
validateLimits("pea_por_sexo", "mes", max, min)
max <- 2
min <- 1
validateLimits("pea_por_sexo", "mes", max, min)
validateLimits("pea_por_sexo", "total_por_mil", max, min)
validateLimits("pea_por_sexo", "total_por_mil", min, max)
validateLimits <- function(data, columnName, min, max){
if(class(min) != class(max)){
return(FALSE)
}
else if(!is.character(min) && !is.numeric(min) && class(min) != "Date"){
return(FALSE)
}
else if(min >= max){
return(FALSE)
}
if(is.character(data)){
type <- getDataTypes(data, columnName)[1,"ctype"]
return(type)
if(is.character(min)){
return(grepl("^varchar", type))
}
else if(class(min) == "Date"){
return(type == "date" || type == "datetime")
}
else if(is.numeric(min)){
return(type == "int" || type == "double")
}
}
else if(is.data.frame(data)){
type <- class(data[,columnName])
if(is.character(min)){
return(type == "character")
}
else if(class(min) == "Date"){
return(type == "Date")
}
else if(is.numeric(min)){
return(type == "numeric")
}
}
stop("Parameter 'data' is not valid. It should be a data.frame or a character.");
}
validateLimits("pea_por_sexo", "total_por_mil", min, max)
head(data)
validateTargetVariable(data,"percentual_ativas")
validateTargetVariable(data,"tipo_area")
validateTargetVariable <- function(data, targetVar){
if(is.character(data)){
type = getDataTypes(data, targetVar)[,"ctype"]
return(type == "int" || type == "double")
}
else if(is.data.frame(data)){
return(is.numeric(data[,targetVar]))
}
stop("Parameter 'data' is not valid. It should be a data.frame or a character.")
}
validateTargetVariable(data,"tipo_area")
validateTargetVariable(data,"percentual_total")
validateTargetVariable(data,"mes")
validateTargetVariable("pea_por_sexo","mes")
validateTargetVariable("pea_por_sexo","percentual_total")
validateTimeVariable <- function(data, timeVar){
if(is.character(data)){
type = getDataTypes(data, targetVar)[,"ctype"]
return(type == "int" || type == "date" || type == "datetime")
}
else if(is.data.frame(data)){
return(is.integer(data[,targetVar]) || class(data[,targetVar]) == "Date")
}
stop("Parameter 'data' is not valid. It should be a data.frame or a character.")
#x%%1==0
#all.equal(a, as.integer(a))
#return(TRUE);
}
validateTimeVariable(data,"mes")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/validateTimeVariable.R')
validateTimeVariable(data,"mes")
validateTimeVariable(data,"tipo_area")
validateTimeVariable(data,"percentual_total")
is.integer(data[,"percentual_total"])
data[,"percentual_total"]
head(data)
data[,5] <- dbGetQuery(connect(), "select total_por_mil from pea_por_sexo")
head(data)
names(data)[5] <- "teste"
validateTimeVariable(data,"teste")
paste("*",collapse = ", ")
con <- connect()
library(dzVis)
con <- connect()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(dzVis)
con <- connect()
roxygen2::roxygenise()
library(dzVis)
con <- connect()
library(dzVis)
con <- connect()
library(dzVis)
con <- connect()
library(dzVis)
con <- connect()
?pasteLimitRestrictions
?validateConsistency
data <- dbGetQuery(con, "select tipo_area, percentual_total from pea_por_sexo")
col <- "tipo_area"
fac <- "Total das áreas"
head(data[col == fac,])
head(data[,col == fac])
head(data[col == fac,"percentual_total"])
head(data["percentual_total",col == fac])
head(data[,data[,col] == fac])
head(data[data[,col] == fac],)
data[,col]
data[,col == fac]
fac
data[,data[,col] == fac]
data[data[,col] == fac,]
data[data[,col] == fac,"percentual_total"]
data <- dbGetQuery(con, "select tipo_area, percentual_total, mes from pea_por_sexo")
data[data[,col] == fac,"mes"]
unique(data[,"mes"])
data <- dbGetQuery(con, "select tipo_area, percentual_total, mes from pea_por_sexo where sexo = 'Homem'")
unique(data[,"mes"])
length(unique(data[,"mes"]))
length(data[data[,"tipo_area"] == "Total das áreas","mes"])
vec1 <- unique(data[,"mes"])
vec2 <- data[data[,"tipo_area"] == "Total das áreas","mes"]
identical(vec1,vec2)
vec1 <- sort(vec1, decreasing = TRUE)
identical(vec1,vec2)
vec1
vec1 <- sort(vec1, decreasing = FALSE)
vec1 <- sort(vec1, decreasing = FALSE)
identical(vec1,vec2)
library(dzVis)
data <- dbGetQuery(con, "select tipo_area, percentual_total, mes from pea_por_sexo where sexo = 'Homem'")
con <- connect()
data <- dbGetQuery(con, "select tipo_area, percentual_total, mes from pea_por_sexo where sexo = 'Homem'")
validateConsistency(data, "mes", "tipo_area", "percentual_total")
data <- importData("pea_por_sexo", t(as.matrix(c("mes", "tipo_area", "percentual_total"))),restrictions = t(as.matrix(c("sexo","Homem"))))
?importData
?importData
roxygenise()
library(roxygen2)
roxygenise()
library(dzVis)
roxygenise()
library(dzVis)
?pasteLimitRestrictions
library(dzVis)
roxygenise()
library(dzVis)
data <- importData("pea_por_sexo", t(as.matrix(c("mes", "tipo_area", "percentual_total"))),restrictions = t(as.matrix(c("sexo","Homem"))))
?importData
cols <- t(as.matrix(c("mes","tipo_area","percentual_total")))
cols
cols <- c("mes","tipo_area","percentual_total")
restrictions = t(as.matrix(c("sexo","Homem")
restrictions = t(as.matrix(c("sexo","Homem"))
restrictions = t(as.matrix(c("sexo","Homem")))
restrictions
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
library(dzVis)
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
restrictions = t(as.matrix(c("sexo","Homem")))
cols <- c("mes","tipo_area","percentual_total")
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
restrictions = t(as.matrix(c("sexo","Homem")))
cols <- c("mes","tipo_area","percentual_total")
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
library(dzVis)
restrictions = t(as.matrix(c("sexo","Homem")))
cols <- c("mes","tipo_area","percentual_total")
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
restrictions = t(as.matrix(c("sexo","Homem")))
cols <- c("mes","tipo_area","percentual_total")
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
library(dzVis)
restrictions = t(as.matrix(c("sexo","Homem")))
cols <- c("mes","tipo_area","percentual_total")
data <- importData("pea_por_sexo",cols,restrictions = restrictions)
