}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
dbDesc[[dbName]]["id"] <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
?cbind
library(RMySQL)
library(jsonlite)
setwd("C:\\Users\\Talitha\\Dropbox\\Economia\\Projeto Final\\R Package\\dzVis\\www\\data")
# Connect to the dzVis database and get the names of all the tables
connection <- dbConnect(MySQL(), db="dzVis",  user = "dzvisuser", host = "Talitha-PC", port=3306)
results <- dbGetQuery(connection, "show databases;")
allTables <- dbListTables(connection)
# Select only the description tables
tableNames <- allTables[grepl("^desc_", allTables)]
# Get all the data from each of these tables
dbDesc = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbDesc[[index]] = dbReadTable(connection,tableNames[index])
}
# Select only the tables with aggregate data from IBGE
tableNames <- allTables[!grepl("^desc_", allTables) & !grepl("tabelas",allTables)]
# Get all the data from each of these tables
dbAD = vector(mode ="list", length = length(tableNames))
for(index in seq_along(tableNames) ){
dbAD[[index]] = dbReadTable(connection,tableNames[index])
}
names(dbAD) <- tableNames
names(dbDesc) <- tableNames
# Loop through aggregate data tables to find columns of the type enum and
# append their levels to the corresponding description table
for(dbName in names(dbAD)){
iAD = dbAD[[dbName]]
# Get the corresponding description table for table dbName
iDesc = dbDesc[[dbName]]
# Initialize column to be appended to the description table
newCol = vector(mode="list", nrow(iDesc))
count = 1
for(colName in names(iAD)){
# If the column type is enum, get its levels and fill a data.frame with it
if(iDesc[iDesc$cod == colName,"ctype"] == "enum"){
fac <- as.factor(iAD[,colName])
levels <- levels(fac)
nLevels <- length(levels(fac))
# Initialize empty data.frame
tempList = vector(mode="list", length = nLevels)
lvl =  data.frame(matrix(NA, nrow=1, ncol=3 ))
names(lvl) = c("id","text","type")
lvl[1,3] = "lvl"
for(index in seq_along(levels)){
lvl[1,2] = levels[index]
tempList[[index]] = lvl
}
newCol[[count]] = tempList
}
else {
newCol[[count]] = FALSE
}
count = count + 1
}
dbDesc[[dbName]]$children = newCol
# Change column names to be compatible with jstree
names(dbDesc[[dbName]])[1] <- "name"
names(dbDesc[[dbName]])[2] <- "type"
names(dbDesc[[dbName]])[3] <- "text"
col <- lapply(dbDesc[[dbName]]["name"], function(x){paste(dbName,".",x,sep="")})
dbDesc[[dbName]][2] <- rep("attr",nrow(dbDesc[[dbName]][2]))
dbDesc[[dbName]] = cbind(col, dbDesc[[dbName]])
names(dbDesc[[dbName]])[1] <- "id"
}
# Assemble the JSON file with all the relevant information
completeJSON = "["
for(index in seq_along(dbDesc)){
tableJSON <- toJSON(dbDesc[index], pretty= TRUE)
completeJSON <- paste(completeJSON, " ", tableJSON, "\n\n", sep="")
}
completeJSON = paste(completeJSON, "]", sep="")
completeJSON = gsub(',\n      \"children\": \\[false\\]\n',"",completeJSON)
completeJSON = gsub('\"children\": \\[\n        \\[\n',"\"children\": \\[\n",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n          \\}\n        \\],\n',"\"type\": \"lvl\"\n         \\},",completeJSON)
completeJSON = gsub('\"type\": \"lvl\"\n         \\},        \\[',"\"type\": \"lvl\"\n         },",completeJSON)
completeJSON = gsub(' \"type\": \"lvl\"\n          \\}\n        \\]\n      \\]\n'," \"type\": \"lvl\"\n          \\}\n        \\]\n",completeJSON)
completeJSON = gsub('\\}\n\n \\{',"\\},\n{",completeJSON)
for(name in names(dbAD)){
name <- paste('\"',name,'\"',sep="")
query <- paste("select descricao from tabelas where nome = ", name);
results <- dbGetQuery(connection, query)
rootNode = paste('\"id\": ',name,', \"text\": ', gsub("_", " ", name), ', \"description\": "', results[[1]], '", \"children\"', sep="")
completeJSON = gsub(name,rootNode,completeJSON)
}
con <- file("menu2.json", encoding="utf8")
write(completeJSON,file = con)
# Close file connection
close(con)
# Disconnect from dzvis database
dbDisconnect(connection)
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
?dzVis
library(dzVis)
?validateTimeVariable
getwd()
setwd("C://Users//Talitha//Dropbox//Economia//Projeto Final//R Package//dzVis")
getwd()
rebuild(run =F)
library(dzVis)
?validateTimeVariable
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild()
(.packages())
rm(list = ls())
(.packages())
ls
ls()
(.packages())
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
library(dzVis)
validateKeys("pea_por_idade", "")
rebuild(run = F)
library(dzVis)
rebuild(run = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebuild(run = F)
getColumnByCategories("pea_por_sexo",.TARGET)
getColumnByCategory("pea_por_sexo",.TARGET)
getColumnsByCategory("pea_por_sexo",.TARGET)
library(dzVis)
getColumnsByCategory("pea_por_sexo",.TARGET)
?dzVis
library(dzVis)
?dzVis
?importData
?dzVis
?dzvis
??dzvis
rebuild(run = F)
library(dzVis)
getColumnsByCategory("pea_por_sexo",.TARGET)
getColumnsByCategory("pea_por_sexo","TARGET")
rebuild(run = F)
getColumnsByCategory("pea_por_sexo","TARGET")
.TARGET
?getCOlumnsByCategory
?getColumnsByCategory
?getColumnsByCategory
library(roxygen2)
source('C:/Users/Alex/Desktop/Projetos/Projeto Final/R Package/util.R')
update.packages("RMySQL")
update.packages("opencpu")
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
updateFrontEnd()
rebuild(run = F, doc = F)
library(dzVis)
?getLimits
library(dzVis)
getLimits("pea_por_idade", "mes")
rebuild(run = F, doc = T)
getLimits("pea_por_idade", "mes")
rebuild(install = F, run = F)
getLimits("pea_por_idade", "mes")
rebuild(install = T, run = F)
getLimits("pea_por_idade", "mes")
rebuild(install = T, run = F)
getLimits("pea_por_idade", "mes")
getLimits <- function(table, column, connection = NULL){
conn <- connection
if(is.null(connection)){
conn <- connect()
}
min <- paste("(",column,")",sep="")
max <- paste("(",column,")",sep="")
query <- paste("select", min, max, "from", table)
results <- dbGetQuery(conn, query)
print(query)
if(is.null(connection)) {
disconnect(conn)
}
return(results)
}
getLimits("pea_por_idade", "mes")
library(RMySQL)
getLimits("pea_por_idade", "mes")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/getLimits.R')
getLimits("pea_por_idade", "mes")
rebuild(run = F)
getLimits("pea_por_idade", "mes")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/getLimits.R')
getLimits("pea_por_idade", "mes")
getLimits("pea_por_idade", "mes")
getLimits("pea_por_idade", "mes")
rebuild(run = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/getLimits.R')
getLimits("pea_por_idade", "mes")
print(query)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/getLimits.R')
getLimits("pea_por_idade", "mes")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/getLimits.R')
getLimits("pea_por_idade", "mes")
library(dzVis)
getLimits("pea_por_idade", "mes")
getLimits("pea_por_idade", "mes")
library(dzVis)
getLimits("pea_por_idade", "mes")
rm(list = ls())
getLimits("pea_por_idade", "mes")
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/mapChartVariables.R')
mapChartVariables("pea_por_idade","*")
rm(list=ls())
library(dzVis)
mapChartVariables("pea_por_idade","*")
rest <- c("tipo_area", "Total das áreas")
rest
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01", rest)
rest <- matrx(nrow = 1, ncol = 1)
rest <- matrix(nrow = 1, ncol = 1)
rest[,1] <- c("tipo_area", "total_das_areas")
rest <- matrix(nrow = 1, ncol = 2)
rest[,1] <- c("tipo_area", "total_das_areas")
rest[,1] <- c("tipo_area", "total_das_areas")
rest
rest[1,] <- c("tipo_area", "total_das_areas")
rest
rest[1,] <- c("tipo_area", "Total das áreas")
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01", rest)
as.matrix(c("tipo_area","Total das áreas"))
t(as.matrix(c("tipo_area","Total das áreas")))
rebulid(run = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebulid(run = F)
source('C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/util.R')
rebulid(run = F)
rebuild(run = F)
as.matrix(c("tipo_area","Total das áreas"))
library(dzVis)
?createComboChart
library(dzVis)
?createComboChart
rebuild(run = F)
rebuild(run = F)
options=list(seriesType="bars", chartArea = "{width : '65%', left: 30}"
options=list(seriesType="bars", chartArea = "{width : '65%', left: 30}", width=900)
options
options=list(seriesType="bars", chartArea = "{width : '65%', left: 30}", width=900)
c(options, smt = "llaaa")
?cbind
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
m[,3] <- a
apply(m, 1, mean)
cbind(m,apply(m, 1, mean))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01", lineVar="", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01", lineVar="", t(as.matrix(c("tipo_area","Total das áreas"))))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
Sys.getlocale(category = "LC_TIME")
Sys.setlocale("LC_TIME","Portuguese_Brazil.1252")
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","","", t(as.matrix(c("tipo_area","Total das áreas"))))
s <- apply(m, 1, mean)
s
names(s) <- "olar"
s
m
t(apply(m, 1, mean))
apply(m, 1, mean)
name(s)<- "stm"
library(dzVis)
importData("pea_por_sexo","mes")
head(importData("pea_por_sexo","mes"))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas",NULL, t(as.matrix(c("tipo_area","Total das áreas"))))
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas",NULL, t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas",NULL, t(as.matrix(c("tipo_area","Total das áreas"))))
temp[,1] <- c(1,2,3)
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas","Media", t(as.matrix(c("tipo_area","Total das áreas"))))
library(dzVis)
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas","Media", t(as.matrix(c("tipo_area","Total das áreas"))))
rest
rest <- matrix(ncol = 2, nrow = 6)
rest[,1] <- c("tipo_area","Total das áreas")
rest[,2] <- c("grupo_idade","10 a 14 anos")
rest[,2] <- c("grupo_idade","15 a 17 anos")
rest[,2] <- c("grupo_idade","10 a 14 anos")
rest[,3] <- c("grupo_idade","15 a 17 anos")
rest <- matrix(ncol = 2, nrow = 6)
rest[1,] <- c("tipo_area","Total das áreas")
rest[2,] <- c("grupo_idade","10 a 14 anos")
rest[3,] <- c("grupo_idade","15 a 17 anos")
rest[4,] <- c("grupo_idade","15 a 17 anos")
rest[4,] <- c("grupo_idade","18 a 24 anos")
rest[5,] <- c("grupo_idade","25 a 49 anos")
rest[6,] <- c("grupo_idade","50 anos ou mais")
rest
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas","Media", t(as.matrix(c("tipo_area","Total das áreas"))))
rest
createComboChart("chart","pea_por_idade","percentual_total", "grupo_idade","mes","2010-01-01","2010-05-01","percentual_ativas","Media", rest)
importData("pea_por_idade","*")
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"))
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),rest)
library(dzVis)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),rest)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),rest)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),rest)
library(dzVis)
library(dzVis)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),rest)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),restrictions = rest)
rest
library(dzVis)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),restrictions = rest)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"))
library(dzVis)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"))
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),restrictions = rest)
library(dzVis)
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),restrictions = rest)
getwd()
importData("pea_por_idade",c("grupo_idade","mes","percentual_total"),restrictions = rest)
rest
library(dzVis)
importData("pea_por_idade",c("tipo_area","mes","total_por_mil"))
data <- importData("pea_por_idade",c("tipo_area","mes","total_por_mil"))
head(importData("pea_por_idade",c("tipo_area","mes","total_por_mil")))
library(dzVis)
head(importData("pea_por_idade",c("tipo_area","mes","total_por_mil")))
head(importData("pea_por_idade",c("tipo_area","mes","total_por_mil")))
library(dzVis)
head(importData("pea_por_idade",c("tipo_area","mes","total_por_mil")))
rebuild(run = F)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
rebuild(run = F)
rm(list = ls())
rebuild(run = F)
roxygenise()
roxygen2::roxygenize()
