{
    "contents" : "#' @title Validate key parameters\n#'\n#' @description Checks if the values of a parameter are unique within a data table.\n#'              It uses a direct connection to the dzVis database.\n#'\n#' @param table A \\code{character}. The name of the table in the dzVis database.\n#' @param keys A \\code{character vector}. The column name(s) of the candidate key(s).\n#'\n#' @section Validation rules:\n#' \\enumerate{\n#'    \\item If \\code{keys} has only one column name, each row of this column must contain a different value.\n#'    \\item If \\code{keys} has more than one column name, a subset of those columns must have unique values when combined.\n#' }\n#'\n#' @return A \\code{character}. The constant \\code{.VALID} if the parameters are valid.\n#'         Otherwise, a \\code{vector} containing the names of the columns that should be restricted to make \\code{keys} values unique when combined.\n#'\n#' @export\n\nvalidateKeys <- function(table, candidateKeys, connection = NULL){\n\n  conn <- connection\n  restrictions <- NULL\n\n  if(is.null(connection)){\n    conn <- connect()\n  }\n\n  query = paste(\"describe\", table)\n  info <- dbGetQuery(conn, query)\n\n  actualKeys <- info[info$Key == \"PRI\",\"Field\"]\n\n  for(key in actualKeys){\n    if(!(key %in% candidateKeys)){\n      restrictions <- c(restrictions, key)\n    }\n  }\n\n  if(is.null(connection)) {\n    disconnect(conn)\n  }\n\n\n  if(is.null(restrictions)){\n    return(.VALID)\n  }\n\n  return(restrictions)\n\n}\n",
    "created" : 1453938598216.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2269081366",
    "id" : "98A0E6E2",
    "lastKnownWriteTime" : 1453939920,
    "path" : "C:/Users/Talitha/Dropbox/Economia/Projeto Final/R Package/dzVis/R/validateKeys.R",
    "project_path" : "R/validateKeys.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}